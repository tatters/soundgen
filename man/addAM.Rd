% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amplitude.R
\name{addAM}
\alias{addAM}
\title{Add amplitude modulation}
\usage{
addAM(
  x,
  samplingRate = NULL,
  amDep = 25,
  amFreq = 30,
  amType = c("logistic", "sine")[1],
  amShape = 0,
  invalidArgAction = c("adjust", "abort", "ignore")[1],
  plot = FALSE,
  play = FALSE,
  checkFormat = TRUE
)
}
\arguments{
\item{x}{path to a .wav file or a vector of amplitudes with specified
samplingRate}

\item{samplingRate}{sampling frequency, Hz}

\item{amDep}{amplitude modulation (AM) depth, \%. 0: no change; 100: AM with
amplitude range equal to the dynamic range of the sound (anchor format)}

\item{amFreq}{AM frequency, Hz (anchor format)}

\item{amType}{"sine" = sinusoidal, "logistic" = logistic (default)}

\item{amShape}{ignore if amType = "sine", otherwise determines the shape of
non-sinusoidal AM: 0 = ~sine, -1 = notches, +1 = clicks (anchor format)}

\item{invalidArgAction}{what to do if an argument is invalid or outside the
range in \code{permittedValues}: 'adjust' = reset to default value, 'abort'
= stop execution, 'ignore' = throw a warning and continue (may crash)}

\item{plot}{if TRUE, plots the amplitude modulation}

\item{play}{if TRUE, plays the synthesized sound using the default player on
your system. If character, passed to \code{\link[tuneR]{play}} as the name
of player to use, eg "aplay", "play", "vlc", etc. In case of errors, try
setting another default player for \code{\link[tuneR]{play}}}

\item{checkFormat}{only FALSE when called internally by soundgen()}
}
\description{
Adds sinusidal or logistic amplitude modulation to a sound. This produces
additional harmonics in the spectrum at ±am_freq around each original
harmonic and makes the sound rough. The optimal frequency for creating a
perception of roughness is ~70 Hz (Fastl & Zwicker "Psychoacoustics").
Sinusoidal AM creates a single pair of new harmonics, while non-sinusoidal AM
creates more extra harmonics (see examples).
}
\examples{
sound1 = soundgen(pitch = c(200, 300), addSilence = 0)
s1 = addAM(sound1, 16000, amDep = c(0, 50, 0), amFreq = 75, plot = TRUE)
# playme(s1)
\dontrun{
# Parameters can be specified as in the soundgen() function, eg:
s2 = addAM(sound1, 16000,
         amDep = list(time = c(0, 50, 52, 200, 201, 300),
                      value = c(0, 0, 35, 25, 0, 0)),
         plot = TRUE, play = TRUE)

# If am_freq is f0 / integer, we can get subharmonics (in this case at 300 /
2 = 150 Hz)
sound2 = soundgen(sylLen = 800, pitch = 300, addSilence = 0)
s3 = addAM(sound2, 16000, amDep = 30, amFreq = 150,
           plot = TRUE, play = TRUE)
spectrogram(s3, 16000, ylim = c(0, 2))

# Sinusoidal AM produces exactly 2 extra harmonics at ±am_freq around each f0
harmonic:
s4 = addAM(sound2, 16000, amDep = 30, amFreq = c(50, 80), amType = 'sine',
           plot = TRUE, play = TRUE)
spectrogram(s4, 16000, windowLength = 150, ylim = c(0, 2))

# Non-sinusoidal AM produces multiple new harmonics, which can resemble
subharmonics...
s5 = addAM(sound2, 16000, amDep = 70, amFreq = 50, amShape = -1,
           plot = TRUE, play = TRUE)
spectrogram(s5, 16000, windowLength = 150, ylim = c(0, 2))

# ...but more often look like sidebands
sound3 = soundgen(sylLen = 600, pitch = c(800, 1300, 1100), addSilence = 0)
s6 = addAM(sound3, 16000, amDep = c(0, 30, 100, 40, 0),
           amFreq = 105, amShape = -.3,
           plot = TRUE, play = TRUE)
spectrogram(s6, 16000, ylim = c(0, 5))

# Feel free to add AM stochastically:
s7 = addAM(sound2, 16000,
           amDep = rnorm(10, 40, 20), amFreq = rnorm(20, 70, 20),
           plot = TRUE, play = TRUE)
spectrogram(s7, 16000, windowLength = 150, ylim = c(0, 2))
}
}
