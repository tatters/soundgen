% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/audSpec.R
\name{audSpectrogram}
\alias{audSpectrogram}
\title{Auditory spectrogram}
\usage{
audSpectrogram(
  x,
  samplingRate = NULL,
  scale = NULL,
  from = NULL,
  to = NULL,
  dynamicRange = 80,
  nFilters = 128,
  minFreq = 20,
  maxFreq = samplingRate/2,
  minBandwidth = 1,
  reportEvery = NULL,
  plot = TRUE,
  savePlots = NULL,
  osc = c("none", "linear", "dB")[2],
  heights = c(3, 1),
  ylim = NULL,
  yScale = c("log", "llinear")[1],
  contrast = 0.2,
  brightness = 0,
  maxPoints = c(1e+05, 5e+05),
  padWithSilence = TRUE,
  colorTheme = c("bw", "seewave", "heat.colors", "...")[1],
  extraContour = NULL,
  xlab = NULL,
  ylab = NULL,
  xaxp = NULL,
  mar = c(5.1, 4.1, 4.1, 2),
  main = NULL,
  grid = NULL,
  width = 900,
  height = 500,
  units = "px",
  res = NA,
  ...
)
}
\description{
Internal soundgen function (work in progress)
}
\details{
While tuneR::audspec is based on FFT, here we convolve the sound with a bank
of filters. The main difference is that we don't window the signal and
therefore get full temporal resolution in all frequency bins. For ex., this
preserves high-frequency AM that is completely invisible in a spectrogram.
}
\examples{
# synthesize a sound 500 ms long, with gradually increasing hissing noise
sound = soundgen(sylLen = 200, temperature = 0.001,
  noise = list(time = c(0, 650), value = c(-40, 0)),
  formantsNoise = list(f1 = list(freq = 5000, width = 10000)),
  addSilence = 25)
# playme(sound, samplingRate = 16000)

# auditory spectrogram
soundgen:::audSpectrogram(sound, samplingRate = 16000)

# compare to an FFT-based spectrogram on log-scale
spectrogram(sound, samplingRate = 16000, yScale = 'log')

\dontrun{
# add bells and whistles
soundgen:::audSpectrogram(sound, samplingRate = 16000,
  yScale = 'linear',
  osc = 'dB',  # plot oscillogram in dB
  heights = c(2, 1),  # spectro/osc height ratio
  brightness = -.1,  # reduce brightness
  colorTheme = 'heat.colors',  # pick color theme
  cex.lab = .75, cex.axis = .75,  # text size and other base graphics pars
  grid = 5,  # lines per kHz; to customize, add manually with graphics::grid()
  ylim = c(0, 5),  # always in kHz
  main = 'My spectrogram' # title
  # + axis labels, etc
)

# change dynamic range
soundgen:::audSpectrogram(sound, samplingRate = 16000, dynamicRange = 40)
soundgen:::audSpectrogram(sound, samplingRate = 16000, dynamicRange = 120)

# remove the oscillogram
soundgen:::audSpectrogram(sound, samplingRate = 16000, osc = 'none')  # or NULL etc
}
}
\keyword{internal}
