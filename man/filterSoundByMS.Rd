% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/invertModulSpec.R
\name{filterSoundByMS}
\alias{filterSoundByMS}
\title{Filter sound by modulation spectrum}
\usage{
filterSoundByMS(x, samplingRate = NULL, logSpec = FALSE,
  windowLength = 25, step = NULL, overlap = 80, wn = "hamming",
  zp = 0, amCond = NULL, fmCond = NULL, jointCond = NULL,
  action = c("remove", "preserve")[1], initialPhase = c("zero",
  "random", "spsi")[3], nIter = 50, play = FALSE, plot = TRUE,
  savePath = NA)
}
\arguments{
\item{x}{folder, path to a wav/mp3 file, a numeric vector representing a
waveform, or a list of numeric vectors}

\item{samplingRate}{sampling rate of x (only needed if x is a numeric vector,
rather than an audio file). For a list of sounds, give either one
samplingRate (the same for all) or as many values as there are input files}

\item{logSpec}{if TRUE, the spectrogram is log-transformed prior to taking 2D
FFT}

\item{windowLength}{length of FFT window, ms}

\item{step}{you can override \code{overlap} by specifying FFT step, ms}

\item{overlap}{overlap between successive FFT frames, \%}

\item{wn}{window type: gaussian, hanning, hamming, bartlett, rectangular,
blackman, flattop}

\item{zp}{window length after zero padding, points}

\item{amCond}{character strings with valid conditions on AM or FM (see
examples)}

\item{fmCond}{character strings with valid conditions on AM or FM (see
examples)}

\item{jointCond}{character string with a valid joint condition on AM and FM}

\item{action}{should the defined AM-FM region be removed ('remove') or
preserved, while everything else is removed ('preserve')?}

\item{initialPhase}{initial phase estimate: "zero" = set all phases to zero;
"random" = Gaussian noise; "spsi" (default) = single-pass spectrogram
inversion (Beauregard et al., 2015)}

\item{nIter}{the number of iterations of the GL algorithm (Griffin & Lim,
1984), 0 = don't run}

\item{play}{if TRUE, plays back the output}

\item{plot}{if TRUE, produces a triple plot: original MS, filtered MS, and
the MS of the output sound}

\item{savePath}{if a valid path is specified, a plot is saved in this folder
(defaults to NA)}
}
\value{
Returns the filtered audio as a numeric vector normalized to [-1, 1]
  with the same sampling rate as input.
}
\description{
Manipulates the modulation spectrum (MS) of a sound so as to remove certain
frequencies of amplitude modulation (AM) and frequency modulation (FM).
Algorithm: produces a modulation spectrum with
\code{\link{modulationSpectrum}}, modifies it with \code{\link{filterMS}},
converts the modified MS to a spectrogram with \code{\link{msToSpec}}, and
finally inverts the spectrogram with \code{\link{invertSpectrogram}}, thus
producing a sound with (approximately) the desired characteristics of the MS.
Note that the last step of inverting the spectrogram introduces some noise,
so the resulting MS is not precisely the same as the intermediate filtered
version. In practice this means that some residual energy will still be
present in the filtered-out frequency range (see examples).
}
\examples{
# Create a sound to be filtered
samplingRate = 16000
s = soundgen(sylLen = 500, pitch = rnorm(n = 20, mean = 200, sd = 25),
  amFreq = 25, amDep = 50, samplingRate = samplingRate,
  plot = TRUE, osc = TRUE)
# playme(s, samplingRate)

# Filter
s_filt = filterSoundByMS(s, samplingRate = samplingRate,
  amCond = 'abs(am) > 15', fmCond = 'abs(fm) > 5',
  action = 'remove', nIter = 15)
# playme(s_filt, samplingRate)

# add exs with an audio file as an input, etc
\dontrun{
# You can also use manual filters w/o calling filterSoundByMS

#' # Check that the spectrogram can be successfully inverted
s_rev = invertSpectrogram(spec, samplingRate = samplingRate,
  windowLength = 25, overlap = 80, wn = 'hamming', play = FALSE)
# playme(s_rev, samplingRate)
spectrogram(s_rev, samplingRate, osc = TRUE)

}
}
\seealso{
\code{\link{invertSpectrogram}} \code{\link{filterMS}}
}
